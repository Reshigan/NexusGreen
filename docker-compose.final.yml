version: '3.8'

# SolarNexus Final Production Docker Compose Configuration
# This configuration provides a complete, production-ready deployment

services:
  # PostgreSQL Database - Primary data store
  postgres:
    image: postgres:15-alpine
    container_name: solarnexus-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: solarnexus
      POSTGRES_USER: solarnexus
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-solarnexus_secure_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - solarnexus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U solarnexus -d solarnexus"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis - Caching and session management
  redis:
    image: redis:7-alpine
    container_name: solarnexus-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_2024}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - solarnexus-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API - Node.js/Express application
  backend:
    build:
      context: ./solarnexus-backend
      dockerfile: Dockerfile.debian
      target: production
    container_name: solarnexus-backend
    restart: unless-stopped
    environment:
      # Application settings
      NODE_ENV: production
      PORT: 3000
      
      # Database configuration
      DATABASE_URL: postgresql://solarnexus:${POSTGRES_PASSWORD:-solarnexus_secure_2024}@postgres:5432/solarnexus
      
      # Redis configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379
      
      # Security settings
      JWT_SECRET: ${JWT_SECRET:-your_super_secure_jwt_secret_key_2024_change_in_production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your_super_secure_jwt_refresh_secret_key_2024_change_in_production}
      
      # API configuration
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost}
      API_RATE_LIMIT: ${API_RATE_LIMIT:-100}
      
      # File upload settings
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      UPLOAD_PATH: /app/uploads
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./backups:/app/backups
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    networks:
      - solarnexus-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend - React application served by nginx
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.final
      target: production
    container_name: solarnexus-frontend
    restart: unless-stopped
    environment:
      # React app configuration
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3000}
      REACT_APP_ENVIRONMENT: production
      REACT_APP_VERSION: "1.0.0"
      REACT_APP_NAME: "SolarNexus"
      
      # Feature flags
      REACT_APP_ENABLE_ANALYTICS: ${ENABLE_ANALYTICS:-false}
      REACT_APP_ENABLE_DEBUG: ${ENABLE_DEBUG:-false}
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - solarnexus-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Persistent volumes for data storage
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis

# Network configuration
networks:
  solarnexus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: solarnexus-br0