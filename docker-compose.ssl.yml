version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: solarnexus-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-solarnexus}
      POSTGRES_USER: ${POSTGRES_USER:-solarnexus}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-solarnexus_secure_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - solarnexus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-solarnexus} -d ${POSTGRES_DB:-solarnexus}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: solarnexus-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password} --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - solarnexus-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_secure_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API
  backend:
    build:
      context: ./solarnexus-backend
      dockerfile: Dockerfile
      target: production
    container_name: solarnexus-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=${DATABASE_URL:-postgresql://solarnexus:solarnexus_secure_password@postgres:5432/solarnexus}
      - REDIS_URL=${REDIS_URL:-redis://:redis_secure_password@redis:6379}
      - JWT_SECRET=${JWT_SECRET:-SolarNexus2024_Production_JWT_Secret_Key_Secure}
      - CORS_ORIGIN=${CORS_ORIGIN:-https://localhost,https://your-domain.com}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - SSL_ENABLED=${SSL_ENABLED:-true}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - solarnexus-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: solarnexus-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./dist:/usr/share/nginx/html:ro
      - ./uploads:/usr/share/nginx/html/uploads:ro
      - ./logs/nginx:/var/log/nginx
      - ./ssl/certbot:/etc/letsencrypt:ro
    networks:
      - solarnexus-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Certbot for Let's Encrypt SSL certificates
  certbot:
    image: certbot/certbot
    container_name: solarnexus-certbot
    volumes:
      - ./ssl/certbot:/etc/letsencrypt
      - ./ssl/www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL:-admin@yourdomain.com} --agree-tos --no-eff-email -d ${DOMAIN:-yourdomain.com}
    depends_on:
      - nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  solarnexus-network:
    driver: bridge