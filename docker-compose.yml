version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: solarnexus-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: solarnexus
      POSTGRES_USER: solarnexus
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-solarnexus_secure_password_2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - solarnexus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U solarnexus -d solarnexus"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: solarnexus-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password_2024}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - solarnexus-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./solarnexus-backend
      dockerfile: Dockerfile
      target: production
    container_name: solarnexus-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://solarnexus:${POSTGRES_PASSWORD:-solarnexus_secure_password_2024}@postgres:5432/solarnexus
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password_2024}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your_super_secure_jwt_secret_key_2024}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your_super_secure_jwt_refresh_secret_key_2024}
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@solarnexus.com}
      EMAIL_FROM_NAME: ${EMAIL_FROM_NAME:-SolarNexus}
      SOLAX_API_TOKEN: ${SOLAX_API_TOKEN}
      SOLAX_API_URL: ${SOLAX_API_URL:-https://www.solaxcloud.com:9443/proxy/api/getRealtimeInfo.do}
      FRONTEND_URL: ${FRONTEND_URL:-https://app.solarnexus.com}
      SERVER_IP: ${SERVER_IP:-13.247.192.38}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "3000:3000"
    networks:
      - solarnexus-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (React)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: solarnexus-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-https://api.solarnexus.com}
      REACT_APP_WS_URL: ${REACT_APP_WS_URL:-wss://api.solarnexus.com}
      REACT_APP_ENVIRONMENT: production
    volumes:
      - frontend_build:/usr/share/nginx/html
    networks:
      - solarnexus-network
    depends_on:
      - backend

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: solarnexus-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - frontend_build:/var/www/html:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - solarnexus-network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML/AI Service (Optional - for predictions)
  # ml-service:
  #   build:
  #     context: ./ml-service
  #     dockerfile: Dockerfile
  #   container_name: solarnexus-ml
  #   restart: unless-stopped
  #   environment:
  #     REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password_2024}@redis:6379
  #     DATABASE_URL: postgresql://solarnexus:${POSTGRES_PASSWORD:-solarnexus_secure_password_2024}@postgres:5432/solarnexus
  #   volumes:
  #     - ./ml-models:/app/models
  #     - ./logs/ml:/app/logs
  #   networks:
  #     - solarnexus-network
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  frontend_build:
    driver: local

networks:
  solarnexus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16