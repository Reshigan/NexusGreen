version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    platform: linux/arm64
    container_name: solarnexus-postgres
    environment:
      POSTGRES_DB: solarnexus
      POSTGRES_USER: solarnexus
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-solarnexus_secure_password_2024}
      # Optimize for low memory
      POSTGRES_SHARED_BUFFERS: 128MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 512MB
      POSTGRES_WORK_MEM: 4MB
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./solarnexus-backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U solarnexus -d solarnexus"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    # Resource limits for t4g.small
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  redis:
    image: redis:7-alpine
    platform: linux/arm64
    container_name: solarnexus-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password_2024} --maxmemory 128mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  backend:
    build:
      context: ./solarnexus-backend
      dockerfile: Dockerfile.arm64
      target: production
    platform: linux/arm64
    container_name: solarnexus-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://solarnexus:${POSTGRES_PASSWORD:-solarnexus_secure_password_2024}@postgres:5432/solarnexus
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password_2024}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your_super_secure_jwt_secret_key_2024_change_this}
      PORT: 3000
      # Node.js memory optimization
      NODE_OPTIONS: "--max-old-space-size=512"
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 384M

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.arm64
      target: production
    platform: linux/arm64
    container_name: solarnexus-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 60s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: solarnexus-network